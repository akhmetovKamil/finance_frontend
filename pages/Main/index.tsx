import Head from 'next/head'
import {useSelectorWithType} from "@/hooks/useSelectorWithType";
import {useDispatchWithType} from "@/hooks/useDispatchWithType";
import {logoutThunk, logoutWithErrorThunk, setAuth} from "@/store/reducers/authReducer";
import {getBalanceThunk} from "@/store/reducers/mainReducer";
import {useEffect} from "react";
import {useRouter} from "next/router";
import {mainApi} from "@/axios/main";
import {Errors} from "@/types/constants";

const Main = () => {
    // const Main = ({test}) => {
    // if (!test) {
    //     return <div>Loading ...</div>
    // }
    const router = useRouter()
    const dispatch = useDispatchWithType()
    const {isAuth,authIsFetching} = useSelectorWithType(state => state.auth)
    const {balance,error,isFetching} = useSelectorWithType(state => state.main)

    //На всех защищенных страницах два этих юз эффекта должны быть
    useEffect(() => {
        mainApi.getBalance().then(() => dispatch(setAuth(true))).catch(e => {
            if (e == Errors.NOT_AUTHORIZED) dispatch(logoutWithErrorThunk())
        })
    }, [])
    useEffect(() => {
        if (!isAuth) router.push('/')
    }, [isAuth])



    const getBalance = async () => {
        dispatch(getBalanceThunk())
    }
    const logout = () => {
        dispatch(logoutThunk())
    }
    const loginPage = () => {
        router.push('/')
    }


    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <h1>Main after auth</h1>
            <button onClick={logout}>Logout</button>
            <button onClick={loginPage}>Login page</button>
            <button onClick={getBalance}>Get balance</button>
            {isFetching ? <div> Loading... </div> : null}
            <div>Balance from client: {balance}</div>
            {/*<div>Balance from getServerSideProps: {test}</div>*/}
            <div>Errors: {error}</div>
        </>
    )
}

// export async function getServerSideProps() {
//     // try {
//     // const data = await axios.get('http://localhost:3002/api/balance/get', {
//     //     headers: {
//     //         Authorization: token
//     //     }
//     // })
//     let data = 999
//     try{
//         const data = await axios.get('http://localhost:3002/api/balance/get', {
//             headers: {
//                 Authorization: token
//             }
//         })
//     }catch (e){
//         console.log(e)
//     }
//
//     return {
//         props: {
//             test: data
//         }
//     };
//     // } catch (e) {
//     //     return {
//     //         redirect: {
//     //             destination: '/rsdtd',
//     //             permanent: false,
//     //         },
//     //     };
//     // }
// }

export default Main