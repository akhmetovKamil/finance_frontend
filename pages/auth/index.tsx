import s from '../../styles/Auth.module.sass';
import React, {
    MutableRefObject,
    useEffect,
    useRef,
    useState,
} from 'react';
import RegForm from '@/components/forms/regForm';
import AuthForm from '@/components/forms/authForm';
import {useSelectorWithType} from '@/hooks/useSelectorWithType';
import {useDispatchWithType} from "@/hooks/useDispatchWithType";
import {checkAuthThunk, setError} from "@/store/reducers/authReducer";
import {useRouter} from "next/router";
import CheckAuthLoadingLayout from "@/components/auth/CheckAuthLoading";
import Head from "next/head";
import HeaderLayout from "@/components/headerLayout";


const AuthPage = () => {
    const router = useRouter()
    const dispatch = useDispatchWithType()
    const {isAuth, isCheckingAuth} = useSelectorWithType(state => state.auth)

    useEffect(() => {
        dispatch(checkAuthThunk())
    }, [])
    useEffect(() => {
        if (isAuth && !isCheckingAuth) router.push('/main')
    }, [isAuth, isCheckingAuth])
    console.log("/Auth ", isCheckingAuth, isAuth)
    if (isCheckingAuth || isAuth) {
        return <CheckAuthLoadingLayout/>
    }
    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <AuthWithAnimation/>
        </>
    )
}
export default AuthPage

const AuthWithAnimation = () => {
    const regForm = useRef<HTMLDivElement>() as MutableRefObject<HTMLDivElement>;
    const authForm = useRef<HTMLDivElement>() as MutableRefObject<HTMLDivElement>;
    const regBtn = useRef<HTMLDivElement>() as MutableRefObject<HTMLDivElement>;
    const authBtn = useRef<HTMLDivElement>() as MutableRefObject<HTMLDivElement>;


    const dispatch = useDispatchWithType()
    const [isAnimation, setIsAnimation] = useState(false)
    const [isClosedForm, setIsClosedForm] = useState(false)

    useEffect(() => {
        authForm.current.classList.toggle(s.animBottom);
        regBtn.current.classList.toggle(s.animTop);
        authForm.current.style.display = 'none';
        regBtn.current.style.display = 'none';
    }, []);

    const animStart = (
        activeForm: MutableRefObject<HTMLDivElement>,
        activeBtn: MutableRefObject<HTMLDivElement>,
        passiveForm: MutableRefObject<HTMLDivElement>,
        passiveBtn: MutableRefObject<HTMLDivElement>
    ) => {
        if (!isAnimation) {
            dispatch(setError(""))
            activeForm.current.classList.toggle(s.animTop);
            activeBtn.current.classList.toggle(s.animBottom);
            setIsAnimation(true)
            setTimeout(() => {
                setIsClosedForm(true)
                activeForm.current.style.display = 'none';
                passiveBtn.current.style.display = 'flex';
                activeBtn.current.style.display = 'none';
                passiveForm.current.style.display = 'flex';
                setTimeout(() => {
                    passiveBtn.current.classList.toggle(s.animTop);
                    activeForm.current.classList.toggle(s.animTop);
                    activeForm.current.classList.toggle(s.animBottom);
                    passiveForm.current.classList.toggle(s.animBottom);
                    activeBtn.current.classList.toggle(s.animBottom);
                    activeBtn.current.classList.toggle(s.animTop);
                    setIsAnimation(false)
                    setIsClosedForm(false)
                }, 100);
            }, 1000);
        }

    };

    return (
        <>
            <main className={s.form}>
                <div ref={regForm}>
                    <RegForm isClosedForm={isClosedForm}/>
                </div>
                <div
                    ref={regBtn}
                    onClick={() => animStart(authForm, regBtn, regForm, authBtn)}
                >
                    Зарегистрироваться
                </div>
                <div
                    ref={authBtn}
                    onClick={() => animStart(regForm, authBtn, authForm, regBtn)}
                >
                    Войти
                </div>
                <div ref={authForm}>
                    <AuthForm isClosedForm={isClosedForm}/>
                </div>
            </main>
        </>
    );
}
